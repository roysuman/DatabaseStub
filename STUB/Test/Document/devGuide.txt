Foreword:
This document gives you the idea of developing the tool TCP-STUB. After going through this Document, you will be able to know the core design and development interface or TCP-STUB. This tool is developed on UNIX, the Windows version is not available.
The first part of this document will provide you a basic idea about how to setup the environment, needed to develop TCP-STUB.
We hope that you will find this document useful and will get some valuable comments.

Who should read this document?
1. The person who wants to contribute his/her ideas to make this tool a standard one.
2. To understand the working principle of TCP-STUB.
3. Developer who wants to improve coding format of TCP-STUB.
4. New Developer, by reading this document you will learn about all designs, functionality of TCP-STUB. 
   It will describe you some common problems those frequently appear for TCP-STUB developer. 

About this document:

This document is written by Suman Roy (email.suman.roy@gmail.com).

Where to get the latest copy of this document?

The latest PDF copy of this document will be available by sending a mail to Suman. 

Providing feedback about this Tool:

Should you have any feedback about this document and/or tool, please send it to the authors 
 through his email address (email.suman.roy@gmail.com).

Chapter 1: Introduction

1.1 Introduction

This chapter will provide you the general information about TCP-STUB development in general.

1.2 What is TCP-STUB?

TCP-STUB is mainly a stubbing tool that will initially capture some data through TCP-IP packets. 
And culturing the packet’s properties it will be able to generate new data. Then TCP-STUB will 
act as a stub server and for client it’s a real server. TCP-STUB perform this task with the 
help of previously stored & generated packet/packets.

1.3 Platform TCP-STUB runs on

TCP-STUB mainly runs on most UNIX platforms (fedora, suse, Ubuntu). It requires Qt Creator, 
	libpcp, libsqlite3, Json  libraries and standard C++ libraries.
	If you fetch any difficulties to install the libraries then you can contact with the author of this document.

1.4 Development and maintenance of TCP-STUB

TCP-STUB was initially developed by Suman.
If you are going to contribute TCP-STUB development, you are strongly recommended to contact Suman.

1.5 Programming language used

TCP-STUB is mainly developed by C++ and ANSI C, so a strong knowledge of C and C++ is required. 
The typical task for a new TCP-STUB development is to add new dissector as well as generator for 
new protocol/protocols. As all the source code for dissector/generator is written on C++ so a 
good knowledge about C++ will be sufficient for TCP-STUB development.

1.6 TCP-STUB license

TCP-STUB is free to use, if anyone does any development that modified development must be also free.




Chapter 2: Quick Setup 

2.1 UNIX: Installation
        To start development of TCP-STUB Unix operating system platform is needed. 
	The following libraries and ttools are need to be installed to start effective development.
	a. GlibC++ ( apt-get install g++ for Ubuntu )
	b. Libpcap can be installed by going through the following link
	http://xgjonathan.blogspot.in/2011/04/how-to-install-libpcap-on-ubuntu.html
	c. Qtcreator needs to be installed.

2.2 Install and prepare source
       After getting the source code of TCP-STUB you need to load the source at Qtcreator. 
       Open the file called /Stub_XX/TCPSTUB/TCPSTUB.pro through Qtcretor then you will be able to see the 
       file structures and source code of TCP-STUB. To build and run the source of 
       TCP-STUB use Ctrl + b and Cntrl + r. You can run TCP stub through command line also by 
       going Stub_XX/TCPSTUB/ and then su ./TCPSTUB.

3. TCP-STUB functionalities

3.1 Introduction

TCP-STUB provides four basic fundamental services. The functionalities of TCP-STUB are,

	a. Capturing raw packet/packets
	b. Stubbing server
	c. Manufacturing Data

3.2 Capturing packet

 This is the main body builder of project TCP-STUB. As we know that TCP-STUB works with 
 TCP level data so we need to capture all meaningful packets from TCP level. If we 
 consider the following diagram we can get a basic idea about a TCP packet.

http://en.wikipedia.org/wiki/Transmission_Control_Protocol

In a TCP packet, the last field is Data part that is our TCP level data (for our application MySQL packet data). 
We have to store this data for future processing.
Steps through code that will help you to understand the flow of capturing packet:
GUI: At first you have to create a new project To capture packets for a few transactions .Then you can use the available interface on which you want to continue capturing of network packets. Once you understand that no network packets related to these transaction is passing, you can stop the transactions.

3.3 Stubbing server:

Dummy server is being used to create a server on a specified port on the TCP stub system.
GUI: Tab 3 has to provide information of scenario name for which you want to do stubbing, IP of the server and port no, then start server will create a dummy server.


3.4 Manufacturing Data:

This is also an important part of project TCPSTUB. After capturing a packet for a 
query, suppose “select * from suman “which returns data “Name =Suman” and 
“Address= Kolkata”. Now you want to manufacture a new query which has not been recorded previously. 
Suppose you want to create a new query like “select * from hedo” which will return “Name= Aritra” and 
“Address=Dumdum”.  Using this tool you can create this new queries also, even you can update the 
reply packet set for already available query also.

GUI:

After opening project from tab3, you can click the dissect button. But you have to run TCPSTUB from command 
line with super user permission “su ./TCPSTUB( linux ) for Ubuntu sudo ./TCPSTUB  “ ( pwd = Stu__/TCPSTUB/ ) 
for generating new data. After clicking the dissect button one table view will appear, click the row 
for appropriate conversation Id whose dissection you want to do. If you go to command line, 
you will able to see the flow and have to give appropriate input.



LOG:

three types of log--
1. standard output log
2. standard error log
3. normal lof--mandatory data you may print there.
