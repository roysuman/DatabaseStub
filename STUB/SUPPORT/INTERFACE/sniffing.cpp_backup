/*
 * =====================================================================================
 *
 *       Filename:  sniffing.cpp
 *
 *    Description:  defination of header file sniffing.hpp
 *
 *        Version:  1.0
 *        Created:  Monday 23 September 2013 08:02:02  IST
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Suman Roy( 346163 )  (roy.suman@cognizant.com),
 *   Organization:  Cognizant Technological Solutions
 *
 * =====================================================================================
 */

#include "sniffing.hpp"
#include "ipc.hpp"
struct sockaddr_in snif::st_source;
struct sockaddr_in snif::st_dest;


//globaly declaration
char ** c_devs;
int count=0;
std::fstream snif::file1;
//ipc::IpcQueue *snif::ipcInstance;
 
    //Initialize static members of class RawPacketProcess.
    int snif::i_tcp = 0 ;
    int snif::i_udp = 0;
    int snif::i_icmp = 0 ;
    int snif::i_others = 0;
    int snif::i_igmp = 0;
    int snif::i_total = 0;
    int snif::i = 0;
    int snif::j = 0;
    int snif::simaphore = 1;
    pcap_t * snif::p_handle;
    pthread_t thread;
    std::fstream snif::fileHandler;




//// function to open two files one for store binary stubb data and another all tcp data with headers.
//void snif::open( void ){
//    snif::file1.open("sniffing.log", std::ios::out);
//    if ( !snif::file1.is_open() ){
//        std::cout<<"Canit open file \"sniffing.log"<<std::endl;
//                exit ( EXIT_FAILURE );
//        }
////	snif::i_line_no = 0;
//    return ;
//    }

//single handling for stoping the process

void snif::signal_callback_handler(int i_signum){
    std::cout<<"Caught signal --"<<i_signum<<std::endl;
    return ;
    file1.close();
    return ;
    std::cout<<"BYE BYE"<<std::endl;
    exit(i_signum);
}


void snif::print_ethernet_header(const u_char *uc_buffer, int i_size){
    struct ethhdr *st_eth= ( struct ethhdr * ) uc_buffer ;
    file1<<std::endl;
    file1<<"\t*******Ethernet Header*******\t\n "<<std::endl
        <<"| Destination Addreaa      \t:"<<":"<<std::setw(2)<<std::hex<<(int)st_eth->h_dest [ 0 ] <<":"<<std::setw( 2 )<<std::hex<<( int )st_eth->h_dest [ 1 ] <<":"<<std::setw ( 2 ) <<std::hex<< ( int )st_eth->h_dest [ 2 ] <<":"<<std::setw (  2 )<<std::hex<<( int )st_eth->h_dest [ 3 ] <<":"<<std::setw( 2 )<<std::hex<<( int )st_eth->h_dest [ 4 ] <<":"<<std::setw ( 2 )<<std::hex<<( int )st_eth->h_dest [ 5 ]<<std::endl
        <<"| Source address           \t:"<<":"<<std::setw( 2 )<<std::hex<<( int)st_eth->h_source [ 0 ] <<":"<<std::setw( 2 ) <<std::hex<<( int )st_eth->h_source [ 1 ] <<":"<<std::setw ( 2 )<<std::hex<<( int )st_eth->h_source [ 2 ] <<":"<<std::setw ( 2 ) <<std::hex<<( int ) st_eth ->h_source [ 3 ] <<":"<<std::setw( 2 ) <<std::hex<<( int ) st_eth->h_source [ 4 ] <<":"<<std::setw( 2 )<<std::hex<<( int ) st_eth->h_source [ 5 ] <<std::endl
        <<"| Protocol                 \t"<< ( unsigned short )st_eth->h_proto <<std::endl;
    }

//functio that will write the capture packet into a file
void snif::writePacket( u_char *ucArgs , const struct pcap_pkthdr* pHandler , const u_char *ucBuffer){
	std::cout<<"erite packet:"<<pHandler->len<<std::endl;
	std::cerr<<"length:"<<( int )pHandler->len<<std::endl;

    snif::fileHandler.write ( reinterpret_cast<const char*> ( &pHandler->len) , sizeof ( int ) );
    snif::fileHandler.write( reinterpret_cast<const char*> ( &ucBuffer) , pHandler->len);
   // snif::fileHandler.flush();

}


//modify
void snif:: process_packet(  const u_char * uc_buffer , int i_size ){
/*
    if ( simaphore == 1 ){
        simaphore == 0 ;
        std::cout<<"Sleep SID\n";
        sleep(60);
        std::cout<<" wake up SID \n";
    }
    */
 //   int i_size=p_header->len;
    //Get IP header part of this packet , excluding the ethernet header
    struct iphdr *st_iph= ( struct iphdr * ) ( uc_buffer + sizeof ( struct ethhdr ) );
    ++ i_total ;
    switch ( st_iph->protocol ) // check the protocol and take action depending on protocol
        {
            case 1: //ICMP protocol
                ++i_icmp;
                break;
				
            case 2: // IGMP protocol
                ++i_igmp;
                break;
				
            case 6: //TCP protocol , this protocol we need to sniff for database port
                ++i_tcp;
                snif::print_tcp_packet ( uc_buffer , i_size ) ;
                break;
				
            case 17: // UDP protocol
                ++ i_udp;
                break;
				
            default: // some other protocol like ARP etc..
                ++i_others;
                break;
				
        }//end of switch
    std::cout<<"\nTCP\t:"<<i_tcp<<"\t UDP\t: "<<i_udp<<"\tICMP\t:"<<i_icmp<<"\tGMP\t:"<<i_igmp<<"\tOthers\t:"<<i_others<<"\tTotal\t:"<<i_total<<std::endl;
    return ;
	
}

// to print tcp pack info
void snif::print_tcp_packet( const u_char *uc_buffer , int i_size ){
    std::cout<<"\n******Tcp-pack*****\n";
    unsigned short us_iphdrlen;
    const u_char *data;
    struct iphdr *st_iph= ( struct iphdr * ) ( uc_buffer + sizeof ( struct ethhdr ) );
    us_iphdrlen = st_iph->ihl * 4 ;
    struct tcphdr *st_tcph = ( struct tcphdr * ) ( uc_buffer  + us_iphdrlen +  sizeof ( struct ethhdr ) );
    //data
    data    = (const u_char *)((unsigned char *)st_tcph + (st_tcph->doff * 4));
    file1<<" DATA == : "<<data<<std::endl;
    //file1<<" Lenth == "<<(int)strlen ( data );

    int i_header_size= sizeof ( struct ethhdr ) + us_iphdrlen + ( st_tcph->doff * 4 );
    if ( ( ntohs ( st_tcph->source)  == 3306 ) | ( ntohs ( st_tcph->dest ) == 3306 ) ){
        file1<<"\n\n *******************************TCP Packet **************************\n";
        snif::print_ip_header( uc_buffer , i_size ) ;
      /*  std::cout<<"\n| TCP Header \n ";
        std::cout<<"\n| Source Port         \t:"<<ntohs ( st_tcph->source )<<std::endl
            <<"\n| Destination Port    \t:"<<ntohs ( st_tcph->dest )<<std::endl
            <<"\n| Sequence Number     \t:"<<ntohl ( st_tcph->seq ) <<std::endl
            <<"\n| Acknowledge No      \t:"<<ntohl ( st_tcph->ack_seq )<<std::endl
            <<"\n| Header length       \t:"<<( unsigned int )st_tcph->doff<<" DWORDS or "<<(unsigned int ) st_tcph->doff * 4 <<"BYTES"<<std::endl
            <<"\n| Urgent Flag         \t:"<<( unsigned int ) st_tcph->urg<<std::endl
            <<"\n| Acknowledge Flag    \t:"<< ( unsigned int ) st_tcph->ack<<std::endl
            <<"\n| Push flag           \t:"<<( unsigned int ) st_tcph->psh<<std::endl
            <<"\n| Reset Flag          \t:"<< ( unsigned int ) st_tcph->psh<<std::endl
            <<"\n| Reset Flag          \t:"<< ( unsigned int )st_tcph->rst<<std::endl
            <<"\n| Synchronise Flag    \t:"<< ( unsigned int ) st_tcph->syn<<std::endl
            <<"\n| Finish Flag         \t:"<< ( unsigned int ) st_tcph->fin<<std::endl
            <<"\n| Window              \t:"<< ( unsigned int ) ntohs( st_tcph->window )<<std::endl
            <<"\n| Checksum           \t:"<<ntohs( st_tcph->check )<<std::endl
            <<"\n| Urgent POinter      \t:"<<st_tcph->urg_ptr<<std::endl
            <<"\n| DATA  DUMP              \n"<<std::endl
            <<"\n\t********IP HEADER *********** \n"<<std::endl;
*/
        std::cout<<"print IP header data"<<std::endl;
        snif::print_data ( uc_buffer , us_iphdrlen );
        snif::file1<<"\n\t *** TCP HEADER ***\n"<<std::endl;
        std::cout<<"print TCP header data";
        snif::print_data ( uc_buffer + us_iphdrlen , st_tcph->doff * 4 );
        snif::file1<<"\n\t**** ** Data Payload*** \n"<<std::endl;
        //create the instance of raw data
        rawDataStruct *rawData = new rawDataStruct();

        //check wheather it's mysql protocol or not
             //   if ( ( ntohs ( st_tcph->source ) == 3306 ) || ntohs ( (st_tcph->dest ) == 3306 ) ){
                    rawData->sourcePort = ntohs( st_tcph->source );
                    rawData->destinationPort = ntohs ( st_tcph->dest );
                    rawData->sequenceNumber = ntohl ( st_tcph->seq ) ;
                    rawData->acknowledgeNumber=ntohl ( st_tcph->ack_seq ) ;
                    rawData->length = i_size - i_header_size ;
                    if ( ( ( unsigned int )st_tcph->psh ) == 1 )
                        rawData->tcpFlag.PSH = true;
                    else rawData->tcpFlag.PSH = false ;
                    if ( ( ( unsigned int ) st_tcph->ack ) == 1 )
                        rawData->tcpFlag.ACK = true ;
                    else rawData->tcpFlag.ACK = false ;
                    if ( i_size - i_header_size > 0 ) {
                        rawData->data = uc_buffer + i_header_size ;

                    }
                    if ( ( ( unsigned int )st_tcph->syn ) == 1 )
                        rawData->tcpFlag.SYN = 1;
            else
                rawData->tcpFlag.SYN = 0;
            if ( (  ( unsigned int ) st_tcph->fin ) ==  1 )
                rawData->tcpFlag.FIN = true;
            else
                rawData->tcpFlag.FIN = false;
            std::cout<<"PSH flag = "<<rawData->tcpFlag.PSH<<std::endl
                <<"source port "<<rawData->sourcePort<<std::endl
                <<"destination port "<<rawData->destinationPort<<std::endl
                <<" sequence number "<<rawData->sequenceNumber<<std::endl
                <<" Acknowledge number "<<rawData->acknowledgeNumber<<std::endl
                <<" acknowledge flag "<<rawData->tcpFlag.ACK<<std::endl
                <<" SYN flag      "<<rawData->tcpFlag.SYN<<std::endl
                <<"FIN flag      "<<rawData->tcpFlag.FIN<<std::endl;
            std::cout<<" Size is \t"<<i_size - i_header_size <<std::endl;

            //have to write a buffer handler.(object pl).

          //  pHandler.packetHandler( rawData );
            // ipc::ipcQueueInstance->insertData(rawData);
	    //write ths packet into a temp file
//            snif::fileHandler.open ( "temp.bin", std::ios::out | std::ios::binary | std::ios::app );
//            if ( !snif::fileHandler.is_open() ){
//                std::cerr<<"can't open file to write capture packet\n";
//                exit(0);
//            }
//            snif::fileHandler.write ( reinterpret_cast<char *>( rawData) , sizeof ( rawDataStruct ));
//           // snif::fileHandler.close();


//snif::ipcInstance->insertData(rawData);
  //          int fd=open("temp.bin", std::ios::in | std::ios::out | std::ios::binary | std::ios::app );

               delete rawData;


         //    exit(0);
		
     //   }
        snif::file1<<"#####################################################\n";
        return ;
		
    }
	
}
//print ip header information
void snif::print_ip_header ( const u_char *uc_buffer , int i_size ){
    snif::print_ethernet_header ( uc_buffer , i_size );
    unsigned short us_iphdrlen ;
    struct iphdr  * st_iph = ( struct iphdr * ) ( uc_buffer + sizeof ( struct ethhdr ) );
    us_iphdrlen =st_iph->ihl * 4 ;
    memset ( &st_source , 0 , sizeof ( st_source ) );
    st_source.sin_addr.s_addr = st_iph->saddr ;
    memset ( &st_dest , 0 , sizeof ( st_dest ) );
    st_dest.sin_addr.s_addr = st_iph->daddr;
    file1<<std::endl;
    char s[20];
    char s2[20];
    inet_ntop(AF_INET, &(st_source.sin_addr), s, 100);
    inet_ntop(AF_INET, &(st_dest.sin_addr), s2, 100);
    file1<<"\t*****IP HEADER****** \n"<<std::endl
        <<"| IP Version          \t"<<( unsigned int ) st_iph->version
        <<"| IP Header Length    \t"<<( unsigned int ) st_iph->ihl <<"DWORDS or "<< ( ( unsigned int ) ( st_iph->ihl ) ) * 4 <<"Bytes"<<std::endl
        <<"| Type of service     \t"<<( unsigned int ) st_iph->tos<<std::endl
        <<"| IP Total length     \t"<< ntohs ( st_iph->tot_len ) <<"Bytes( size of packets ) "<<std::endl
        <<"| Identification      \t"<<ntohs ( st_iph->id ) <<std::endl
        <<"| TTL                 \t"<<( unsigned int ) st_iph->ttl <<std::endl
        <<"| Protocol            \t"<< ( unsigned int ) st_iph->protocol<<std::endl
        <<"|Checksum             \t"<<ntohs ( st_iph->check )<<std::endl
        <<"| Source Ip           \t"<<s<<std::endl
        <<"| Destination Ip      \t"<<s2<<std::endl;
}

void snif::print_data ( const u_char *uc_data , int i_size ) {
    for ( int i=0 ; i < i_size ; ++ i ){
        if ( i!= 0 && i % 16 == 0 ){ //if one line of hex print os complete.....
            file1<<"        ";
            for ( int j= i - 16 ; j < i ; ++ j ){
                if ( uc_data [ j ] >=32 && uc_data [ j ] <= 128 )
                    file1<<( unsigned char ) uc_data [ j ] ;//if it's a number or alphabet
                else
                    file1<<".";// else print a dot
            }
            file1<<std::endl;
			
        }
        if ( i % 16 == 0 ) file1<<"  "<<std::endl;
        file1<<std::hex<<( unsigned int ) uc_data [ i ] ;

        if ( i == i_size - 1 ){ //print the last space
            for ( int j= 0 ; j < 15 - i % 16 ; ++ j )
                file1<<"   ";//extra space
            file1<<"       ";
            for ( int j= i - i % 16 ; j <=i ; ++ j){
                if ( uc_data [ j ] >= 32 && uc_data [ j ] <=128 )
                    file1<<( unsigned char ) uc_data [ j ] ;
                else
                    file1<<".";
            }
            file1<<std::endl;
            }


        }
	
}
char ** snif::give_interface( void ){
    char c_errbuf[ 100 ] ;
        
  //  snif::open();
    pcap_if_t *p_alldevsp , *p_device ;
    c_devs=new char*[100];
    for (int i=0; i<100; i++)
        {
            c_devs[ i ] = new char[100];
			
        }


    int i_count=1 ,i_n;
    //Get available devices
    if ( pcap_findalldevs ( &p_alldevsp , c_errbuf ) ){
        std::cerr<<"Error finding devices \t "<<c_errbuf<<std::endl;
        exit (EXIT_FAILURE);
    }
    std::cout<<"\nSearching Done \n";
    //Print the available devices
    std::cout<<"Available devices are \n";
    for ( p_device=p_alldevsp ; p_device != NULL ; p_device=p_device->next ){
//		std::cout<<i_count<<" : "<<p_device->name <<" : "<<std::endl;
        if ( p_device->name != NULL )
            strcpy( c_devs[ i_count ] , p_device->name );
        i_count ++;
        }
   // strcpy ( c_devs [i_count ] , "lo" );
    strcpy ( c_devs [i_count ] , "NULL" );

    return c_devs;
}

void * snif::start_sniffing ( void * value ){
     snif::fileHandler.open("temp.bin", std::ios::in |std::ios::out | std::ios::app | std::ios::binary);
    try{
        //snif::ipcInstance = new ipc::IpcQueue();
    }
    catch ( std::exception &ba){
        std::cerr<<"exception cgt\t"<<ba.what()<<std::endl;
    }
    //now open the temp file where the packets wl be written



    int * id = ( int * ) value;
//    snif::open();
    char *c_devname ;
    char c_errbuf[ 100 ] ;//,c_devs [ 100 ][ 100 ];

    c_devname=c_devs [ *id ]; // take the device name to sniff
    std::cout<<"\nOpening device for sniffing \t"<<c_devname<<std::endl;
    p_handle = pcap_open_live ( c_devname , 65536 , 1 , 0 , c_errbuf );
    if ( p_handle == NULL ){
        std::cerr<<"Could't open device :\t"<<c_devname <<" : "<<c_errbuf <<std::endl;
        exit (EXIT_FAILURE);

    }
    std::cout<<"\ndone\n";
    //put the device for sniffing loop
    signal(SIGINT, snif::signal_callback_handler);

    /*
      create a child thread and give access to the following function
      */

    pcap_loop ( p_handle , -1 , snif::writePacket , NULL );



	

    file1.close();



}

void snif::stopSniffing(){
std::cout<<"PCAP going to close\n";
  pcap_close( p_handle );
 // snif::fileHandler.close();
std::cout<<"pcap closed\n";
//std::cout.flush();
//snif::fileHandler.flush();
snif::fileHandler.close();
snif::fileHandler.close();
/*std::ifstream binaryFile;
binaryFile.open("temp.bin" , std::ios::in | std::ios::binary );
if ( !binaryFile.is_open()){ std::cerr<<"cant open\n"; exit(0);}
int bitsToRead;
while( !binaryFile.eof() ){
binaryFile.read(( char *)&bitsToRead , sizeof( int ) );
if(binaryFile.eof())break;
std::cout<<"length="<<bitsToRead<<std::endl;
char *tempData = new char[ bitsToRead];
binaryFile.read(( char*)&tempData , bitsToRead );
if( binaryFile.eof())break;
snif::process_packet(( const u_char*) &tempData , bitsToRead );
}
std::cout.flush();
exit(0);*/
//snif::fileHandler.seekg( 0 , std::ios::beg );
//int length;
//while ( true){
//    if ( snif::fileHandler.eof() )break;
//    snif::fileHandler.read(  reinterpret_cast< char*>( &length ) , sizeof( int ) );
//    if ( snif::fileHandler.eof() )break;
//    const u_char * tempData = new u_char [ length ];
//    snif::fileHandler.read ( reinterpret_cast< char*> ( &tempData ) , length );
//    snif::process_packet( tempData , length );
//    delete tempData;
//}


//snif::fileHandler.close();

//    captureDb::StoreRawPacket pHandler;
//      rawDataStruct *rawData ;
//    fileHandler.close();
//    std::fstream is;
//    is.open("temp.bin" , std::ios::in | std::ios::out | std::ios::binary);
//    is.read( reinterpret_cast<char*>(&rawData) , sizeof ( rawData));
//  //  read(is,(void *)&rawData, sizeof(rawDataStruct));
//    if ( is.fail() ){ std::cerr<<"reading error\n"; exit ( 0);}
//        std::cout<<"going for dissection data read from file\n";
//            std::cout<<"PSH flag = "<<rawData->tcpFlag.PSH<<std::endl
//                <<"source port "<<rawData->sourcePort<<std::endl
//                <<"destination port "<<rawData->destinationPort<<std::endl
//                <<" sequence number "<<rawData->sequenceNumber<<std::endl
//                <<" Acknowledge number "<<rawData->acknowledgeNumber<<std::endl
//                <<" acknowledge flag "<<rawData->tcpFlag.ACK<<std::endl
//                <<" SYN flag      "<<rawData->tcpFlag.SYN<<std::endl
//                <<"FIN flag      "<<rawData->tcpFlag.FIN<<std::endl;


    
//	    pHandler.packetHandler( rawData );

}

